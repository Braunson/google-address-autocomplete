{"version":3,"file":"index.js","sources":["../src/index.js"],"sourcesContent":["/**\r\n * @export\r\n * @class AddressAutocomplete\r\n * @author Deric Cain <deric.cain@gmail.com>\r\n */\r\nexport default class AddressAutocomplete {\r\n  /**\r\n   * Creates an instance of AddressAutocomplete.\r\n   * @param {string} element - This should be in the form of either '.address' or '#address'\r\n   * @param {function} callback - This callback will have the result passed as the first param\r\n   * @throws Error - If we don't have a valid element\r\n   * @memberof AddressAutocomplete\r\n   */\r\n  constructor(element, callback) {\r\n    // Can take element as '.class-name' or '#id-name'\r\n    this.element = document.querySelector(element);\r\n\r\n    // If we do not find the element, then we need to throw an error\r\n    if (!this.element) {\r\n      throw new Error(\r\n        \"The element you specified is not a valid element. You should attach an input using a class '.some-class' or an ID '#some-id'.\"\r\n      );\r\n    }\r\n\r\n    this.callback = callback;\r\n\r\n    // We are binding the context of 'this' to this class instance\r\n    this.extractAddress = this.extractAddress.bind(this);\r\n    this.getUsersLocation = this.getUsersLocation.bind(this);\r\n    this.handle();\r\n  }\r\n\r\n  /**\r\n   * This takes care of make everything happen\r\n   *\r\n   * @memberof AddressAutocomplete\r\n   */\r\n  handle() {\r\n    // When the document is ready, we need to fire everything off.\r\n    document.addEventListener('readystatechange', () => {\r\n      this.initializeAutocomplete();\r\n      this.element.addEventListener('focus', this.getUsersLocation);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * This method takes care of getting the autocomplete up and running\r\n   *\r\n   * @memberof AddressAutocomplete\r\n   */\r\n  initializeAutocomplete() {\r\n    this.autocomplete = new google.maps.places.Autocomplete(this.element, {\r\n      types: ['geocode'],\r\n    });\r\n    this.autocomplete.addListener('place_changed', this.extractAddress);\r\n  }\r\n\r\n  /**\r\n   * Here, we are taking care of getting the address from the results.\r\n   *\r\n   * @memberof AddressAutocomplete\r\n   */\r\n  extractAddress() {\r\n    const componentForm = {\r\n      street_number: 'short_name',\r\n      route: 'long_name',\r\n      locality: 'long_name',\r\n      administrative_area_level_1: 'short_name',\r\n      country: 'long_name',\r\n      postal_code: 'short_name',\r\n    };\r\n\r\n    const {\r\n      address_components,\r\n      formatted_address,\r\n    } = this.autocomplete.getPlace();\r\n    const {\r\n      geometry,\r\n      formatted_geometry,\r\n    } = this.autocomplete.getPlace();\r\n    const addressObject = {\r\n      streetNumber: '',\r\n      streetName: '',\r\n      cityName: '',\r\n      stateAbbr: '',\r\n      zipCode: '',\r\n    };\r\n    const geoObject = {\r\n        latitude: geometry.location.lat,\r\n        longitude: geometry.location.lng,\r\n    };\r\n    const rawObject = this.autocomplete.getPlace();\r\n\r\n    // Need to loop over the results and create a friendly object\r\n    for (let i = 0; i < address_components.length; i++) {\r\n      const addressType = address_components[i].types[0];\r\n      if (componentForm[addressType]) {\r\n        switch (addressType) {\r\n          case 'street_number':\r\n            addressObject.streetNumber = address_components[i].long_name;\r\n            break;\r\n          case 'route':\r\n            addressObject.streetName = address_components[i].long_name;\r\n            break;\r\n          case 'locality':\r\n            addressObject.cityName = address_components[i].long_name;\r\n            break;\r\n          case 'administrative_area_level_1':\r\n            addressObject.stateAbbr = address_components[i].short_name;\r\n            addressObject.state = address_components[i].long_name;\r\n            break;\r\n          case 'postal_code':\r\n            addressObject.zipCode = address_components[i].long_name;\r\n            break;\r\n          case 'country':\r\n            addressObject.countryAbbr = address_components[i].short_name;\r\n            addressObject.country = address_components[i].long_name;\r\n            break;\r\n          default:\r\n            break;\r\n        }\r\n      }\r\n    }\r\n\r\n    const resultFormatted = Object.assign({}, addressObject, {\r\n      formattedAddress: formatted_address,\r\n    });\r\n    const geoFormatted = Object.assign({}, geoObject);\r\n    const rawResult = Object.assign({}, rawObject);\r\n\r\n    // This is where we check for the callback and then call it, passing our resutls\r\n    this.callback(resultFormatted, geoFormatted, rawResult);\r\n  }\r\n\r\n  /**\r\n   * This will help us narrow down the results of the autocomplete to a user's location\r\n   *\r\n   * @memberof AddressAutocomplete\r\n   */\r\n  getUsersLocation() {\r\n    // Using feature detection to make sure the browser supports geolocation\r\n    if (navigator.geolocation) {\r\n      navigator.geolocation.getCurrentPosition(position => {\r\n        const geolocation = {\r\n          lat: position.coords.latitude,\r\n          lng: position.coords.longitude,\r\n        };\r\n        const circle = new google.maps.Circle({\r\n          center: geolocation,\r\n          radius: position.coords.accuracy,\r\n        });\r\n        this.autocomplete.setBounds(circle.getBounds());\r\n      });\r\n    }\r\n  }\r\n}\r\n"],"names":["AddressAutocomplete","element","callback","document","querySelector","this","Error","extractAddress","bind","getUsersLocation","handle","addEventListener","initializeAutocomplete","_this","autocomplete","google","maps","places","Autocomplete","addListener","componentForm","getPlace","address_components","formatted_address","geometry","addressObject","geoObject","location","lat","lng","rawObject","i","length","addressType","types","streetNumber","long_name","streetName","cityName","stateAbbr","short_name","state","zipCode","countryAbbr","country","resultFormatted","Object","assign","geoFormatted","rawResult","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","circle","Circle","accuracy","setBounds","getBounds"],"mappings":"6XAKqBA,0CAQPC,EAASC,mCAEdD,QAAUE,SAASC,cAAcH,IAGjCI,KAAKJ,cACF,IAAIK,MACR,sIAICJ,SAAWA,OAGXK,eAAiBF,KAAKE,eAAeC,KAAKH,WAC1CI,iBAAmBJ,KAAKI,iBAAiBD,KAAKH,WAC9CK,mFAUIC,iBAAiB,mBAAoB,aACvCC,2BACAX,QAAQU,iBAAiB,QAASE,EAAKJ,0EAUzCK,aAAe,IAAIC,OAAOC,KAAKC,OAAOC,aAAab,KAAKJ,gBACnD,kBAELa,aAAaK,YAAY,gBAAiBd,KAAKE,6DAwC/C,IA/BCa,iBACW,mBACR,qBACG,wCACmB,qBACpB,wBACI,gBAMXf,KAAKS,aAAaO,WAFpBC,IAAAA,mBACAC,IAAAA,kBAGAC,EAEEnB,KAAKS,aAAaO,WAFpBG,SAGIC,gBACU,cACF,YACF,aACC,WACF,IAELC,YACQF,EAASG,SAASC,cACjBJ,EAASG,SAASE,KAE3BC,EAAYzB,KAAKS,aAAaO,WAG3BU,EAAI,EAAGA,EAAIT,EAAmBU,OAAQD,IAAK,KAC5CE,EAAcX,EAAmBS,GAAGG,MAAM,MAC5Cd,EAAca,UACRA,OACD,kBACWE,aAAeb,EAAmBS,GAAGK,oBAEhD,UACWC,WAAaf,EAAmBS,GAAGK,oBAE9C,aACWE,SAAWhB,EAAmBS,GAAGK,oBAE5C,gCACWG,UAAYjB,EAAmBS,GAAGS,aAClCC,MAAQnB,EAAmBS,GAAGK,oBAEzC,gBACWM,QAAUpB,EAAmBS,GAAGK,oBAE3C,YACWO,YAAcrB,EAAmBS,GAAGS,aACpCI,QAAUtB,EAAmBS,GAAGK,eAQhDS,EAAkBC,OAAOC,UAAWtB,oBACtBF,IAEdyB,EAAeF,OAAOC,UAAWrB,GACjCuB,EAAYH,OAAOC,UAAWjB,QAG/B5B,SAAS2C,EAAiBG,EAAcC,yDAUzCC,UAAUC,uBACFA,YAAYC,mBAAmB,gBACjCD,OACCE,EAASC,OAAOC,aAChBF,EAASC,OAAOE,WAEjBC,EAAS,IAAI1C,OAAOC,KAAK0C,eACrBP,SACAE,EAASC,OAAOK,aAErB7C,aAAa8C,UAAUH,EAAOI"}