{"version":3,"file":"index.js","sources":["../src/index.js"],"sourcesContent":["/**\n * @export\n * @class AddressAutocomplete\n * @author Deric Cain <deric.cain@gmail.com>\n */\nexport default class AddressAutocomplete {\n  /**\n   * Creates an instance of AddressAutocomplete.\n   * @param {string} element - This should be in the form of either '.address' or '#address'\n   * @param {function} callback - This callback will have the result passed as the first param\n   * @throws Error - If we don't have a valid element\n   * @memberof AddressAutocomplete\n   */\n  constructor(element, callback) {\n    // Can take element as '.class-name' or '#id-name'\n    this.element = document.querySelector(element);\n\n    // If we do not find the element, then we need to throw an error\n    if (!this.element) {\n      throw new Error(\n        \"The element you specified is not a valid element. You should attach an input using a class '.some-class' or an ID '#some-id'.\"\n      );\n    }\n\n    this.callback = callback;\n\n    // We are binding the context of 'this' to this class instance\n    this.extractAddress = this.extractAddress.bind(this);\n    this.getUsersLocation = this.getUsersLocation.bind(this);\n    this.handle();\n  }\n\n  /**\n   * This takes care of make everything happen\n   *\n   * @memberof AddressAutocomplete\n   */\n  handle() {\n    // When the document is ready, we need to fire everything off.\n    document.addEventListener('readystatechange', () => {\n      this.initializeAutocomplete();\n      this.element.addEventListener('focus', this.getUsersLocation);\n    });\n  }\n\n  /**\n   * This method takes care of getting the autocomplete up and running\n   *\n   * @memberof AddressAutocomplete\n   */\n  initializeAutocomplete() {\n    this.autocomplete = new google.maps.places.Autocomplete(this.element, {\n      types: ['geocode'],\n    });\n    this.autocomplete.addListener('place_changed', this.extractAddress);\n  }\n\n  /**\n   * Here, we are taking care of getting the address from the results.\n   *\n   * @memberof AddressAutocomplete\n   */\n  extractAddress() {\n    const componentForm = {\n      street_number: 'short_name',\n      route: 'long_name',\n      locality: 'long_name',\n      administrative_area_level_1: 'short_name',\n      country: 'long_name',\n      postal_code: 'short_name',\n    };\n\n    const {\n      address_components,\n      formatted_address,\n    } = this.autocomplete.getPlace();\n    const addressObject = {\n      streetNumber: '',\n      streetName: '',\n      cityName: '',\n      stateAbbr: '',\n      zipCode: '',\n    };\n\n    // Need to loop over the results and create a friendly object\n    for (let i = 0; i < address_components.length; i++) {\n      const addressType = address_components[i].types[0];\n      if (componentForm[addressType]) {\n        switch (addressType) {\n          case 'street_number':\n            addressObject.streetNumber = address_components[i].long_name;\n            break;\n          case 'route':\n            addressObject.streetName = address_components[i].long_name;\n            break;\n          case 'locality':\n            addressObject.cityName = address_components[i].long_name;\n            break;\n          case 'administrative_area_level_1':\n            addressObject.stateAbbr = address_components[i].short_name;\n            addressObject.state = address_components[i].long_name;\n            break;\n          case 'postal_code':\n            addressObject.zipCode = address_components[i].long_name;\n            break;\n          case 'country':\n            addressObject.countryAbbr = address_components[i].short_name;\n            addressObject.country = address_components[i].long_name;\n            break;\n          default:\n            break;\n        }\n      }\n    }\n\n    const result = Object.assign({}, addressObject, {\n      formattedAddress: formatted_address,\n    });\n\n    // This is where we check for the callback and then call it, passing our resutls\n    this.callback(result);\n  }\n\n  /**\n   * This will help us narrow down the results of the autocomplete to a user's location\n   *\n   * @memberof AddressAutocomplete\n   */\n  getUsersLocation() {\n    // Using feature detection to make sure the browser supports geolocation\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(position => {\n        const geolocation = {\n          lat: position.coords.latitude,\n          lng: position.coords.longitude,\n        };\n        const circle = new google.maps.Circle({\n          center: geolocation,\n          radius: position.coords.accuracy,\n        });\n        this.autocomplete.setBounds(circle.getBounds());\n      });\n    }\n  }\n}\n"],"names":["AddressAutocomplete","element","callback","document","querySelector","this","Error","extractAddress","bind","getUsersLocation","handle","addEventListener","initializeAutocomplete","_this","autocomplete","google","maps","places","Autocomplete","addListener","componentForm","getPlace","address_components","formatted_address","addressObject","i","length","addressType","types","streetNumber","long_name","streetName","cityName","stateAbbr","short_name","state","zipCode","countryAbbr","country","result","Object","assign","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","circle","Circle","accuracy","setBounds","getBounds"],"mappings":"6XAKqBA,0CAQPC,EAASC,mCAEdD,QAAUE,SAASC,cAAcH,IAGjCI,KAAKJ,cACF,IAAIK,MACR,sIAICJ,SAAWA,OAGXK,eAAiBF,KAAKE,eAAeC,KAAKH,WAC1CI,iBAAmBJ,KAAKI,iBAAiBD,KAAKH,WAC9CK,mFAUIC,iBAAiB,mBAAoB,aACvCC,2BACAX,QAAQU,iBAAiB,QAASE,EAAKJ,0EAUzCK,aAAe,IAAIC,OAAOC,KAAKC,OAAOC,aAAab,KAAKJ,gBACnD,kBAELa,aAAaK,YAAY,gBAAiBd,KAAKE,6DA+B/C,IAtBCa,iBACW,mBACR,qBACG,wCACmB,qBACpB,wBACI,gBAMXf,KAAKS,aAAaO,WAFpBC,IAAAA,mBACAC,IAAAA,kBAEIC,gBACU,cACF,YACF,aACC,WACF,IAIFC,EAAI,EAAGA,EAAIH,EAAmBI,OAAQD,IAAK,KAC5CE,EAAcL,EAAmBG,GAAGG,MAAM,MAC5CR,EAAcO,UACRA,OACD,kBACWE,aAAeP,EAAmBG,GAAGK,oBAEhD,UACWC,WAAaT,EAAmBG,GAAGK,oBAE9C,aACWE,SAAWV,EAAmBG,GAAGK,oBAE5C,gCACWG,UAAYX,EAAmBG,GAAGS,aAClCC,MAAQb,EAAmBG,GAAGK,oBAEzC,gBACWM,QAAUd,EAAmBG,GAAGK,oBAE3C,YACWO,YAAcf,EAAmBG,GAAGS,aACpCI,QAAUhB,EAAmBG,GAAGK,eAQhDS,EAASC,OAAOC,UAAWjB,oBACbD,SAIfrB,SAASqC,yDAUVG,UAAUC,uBACFA,YAAYC,mBAAmB,gBACjCD,OACCE,EAASC,OAAOC,aAChBF,EAASC,OAAOE,WAEjBC,EAAS,IAAIlC,OAAOC,KAAKkC,eACrBP,SACAE,EAASC,OAAOK,aAErBrC,aAAasC,UAAUH,EAAOI"}